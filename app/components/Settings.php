<?php

namespace app\components;

use app\models\enumerables\SettingType;
use Yii;
use yii\helpers\ArrayHelper;

/**
 * Class Settings
 */
class Settings extends \yii2mod\settings\components\Settings
{

    public function init() {
        parent::init();

    }

    public function has($section, $key = null): bool {
        if (is_null($key)) {
            $key = $section;
            $section = 'default';
        }
        return parent::has($section, $key); // TODO: Change the autogenerated stub
    }

    public function get($section, $key = null, $default = null, $array = false, $override = false, $system = false) {
        if (is_null($key)) {
            $key = $section;
            $section = 'default';
        }
        $items = $this->getSettingsConfig();
        if (isset($items[$section][$key]) && !$override) {
            $this->setting = ArrayHelper::getValue($items[$section][$key], 'value');
            $type = ArrayHelper::getValue($items[$section][$key], 'type');
            $this->convertSettingType($type);
        } else {
            if (!empty($default) && !$this->model->find()->where(['section' => $section, 'key' => $key])->exists()) {
                /*if (is_array($default) || $array) {
                    if (!is_array($default)) {
                        $default = array_fill_keys(LanguageSelector::codes(), $default);
                    }
                    $this->set($section, $key, $default, SettingType::TRANSLATED_STRING_TYPE, $system);
                } else */if ((string)intval($default) === (string)$default) {
                    $this->set($section, $key, $default, SettingType::INTEGER_TYPE, $system);
                } else if ((string)floatval($default) === (string)$default) {
                    $this->set($section, $key, $default, SettingType::FLOAT_TYPE, $system);
                } else {
                    $this->set($section, $key, $default, SettingType::STRING_TYPE, $system);
                }
                return $this->get($section, $key);
            }
            $this->setting = $default;
        }

        return $this->setting;
    }

    public function set($section, $key, $value, $type = null, $system = null): bool {
        if ($this->model->setSetting($section, $key, $value, $type, $system)) {
            if ($this->invalidateCache()) {
                return true;
            }
        }

        return false;
    }

    public function inc($section, $key, $inc) {
        if ($this->model->incSetting($section, $key, $inc)) {
            if ($this->invalidateCache()) {
                return true;
            }
        }
        return false;
    }

    /**
     * @var string setting model class name
     */
    public $modelClass = 'app\models\SettingModel';

    /**
     * Set type for setting
     *
     * @param $type
     */
    protected function convertSettingType($type) {
        if ($type === SettingType::BOOLEAN_TYPE) {
            $this->setting = filter_var($this->setting, FILTER_VALIDATE_BOOLEAN);
        } else/* if ($type === SettingType::TRANSLATED_STRING_TYPE) {
            try {
                $this->setting = json_decode($tmp = $this->setting, true);
                $this->setting = is_null($this->setting) ? $tmp : $this->setting;
            } catch (\Exception $e) {
                $this->setting = $tmp;
            }
            $lang = substr(Yii::$app->language, 0, 2);
            $this->setting = is_array($this->setting) ? (isset($this->setting[$lang]) ? $this->setting[$lang] : null) : $this->setting;
        } else*/ {
            settype($this->setting, $type);
        }
    }
}
